import asyncio
import threading
import os
import time
from flask import Flask, request, render_template_string, redirect, url_for, jsonify
import discord
from discord.ext import commands
from dotenv import load_dotenv
from flask_cors import CORS

load_dotenv()

app = Flask(__name__)
CORS(app)
intents = discord.Intents.default()
intents.guilds = True
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)
WELCOME_CHANNEL_ID = int(os.getenv("WELCOME_CHANNEL_ID", 0))

@bot.event
async def on_member_join(member):
    channel = bot.get_channel(WELCOME_CHANNEL_ID)
    print(f"{member} : joined")
    if channel:
        message = WELCOME_MESSAGE.format(mention=member.mention, guild=member.guild.name)
        embed = discord.Embed(
            title="üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö!",
            description=message,
            color=0x00ff00
        )
        embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
        embed.set_image(url="https://yourpicture.png")
        embed.set_footer(text=f"‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà: {member.name}")
        await channel.send(embed=embed)
        
@bot.event
async def on_member_remove(member):
    channel = bot.get_channel(WELCOME_CHANNEL_ID)
    print(f"{member} : Leave")
    if channel:
        embed = discord.Embed(
            title="üëã ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
            description=f'{member.mention} ‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå {member.guild.name}',
            color=0xff0000
        )
        embed.set_thumbnail(url=member.avatar.url if member.avatar else member.default_avatar.url)
        embed.set_footer(text=f"‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å: {member.name}")
        await channel.send(embed=embed)

@app.route('/set_welcome_channel', methods=['POST'])
def set_welcome_channel():
    global WELCOME_CHANNEL_ID
    data = request.json
    new_channel_id = int(data.get("channel_id", 0))
    WELCOME_CHANNEL_ID = new_channel_id
    os.environ["WELCOME_CHANNEL_ID"] = str(new_channel_id)
    return jsonify({"message": "Welcome channel updated!", "channel_id": new_channel_id})

@app.route('/set_welcome_message', methods=['POST'])
def set_welcome_message():
    global WELCOME_MESSAGE
    data = request.json
    new_message = data.get("message", "")
    WELCOME_MESSAGE = new_message
    os.environ["WELCOME_MESSAGE"] = new_message  
    return jsonify({"message": "Welcome message updated!", "content": new_message})


@bot.event
async def on_ready():
    print(f'Logged in as {bot.user}!')
    print("Connected guilds:", [g.name for g in bot.guilds])

@bot.command()
async def announce(ctx, *, message: str):
    await ctx.send(message)

@app.route('/set_status', methods=['POST'])
def set_status():
    data = request.json
    status_text = data.get("status", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    
    async def update_status():
        await bot.change_presence(activity=discord.Game(name=status_text))
    
    asyncio.run_coroutine_threadsafe(update_status(), bot.loop)
    return jsonify({"message": "Status updated!"})

@app.route('/')
def home():
    return render_template_string('''
    <!DOCTYPE html>
    <html lang="th">
    <head>
        <meta charset="UTF-8">
        <title>‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body class="bg-dark text-white">
        <div class="container mt-5 text-center">
         <div class="text-center">
            <img src="https://yourpicture.png" class="img-fluid rounded-circle mx-auto d-block" alt="logo" style="max-width: 200px; height: auto;">
        </div>
            <h1 class="mb-4">ü§ñ MutodGrob Bot Control Panel</h1>
            <div class="d-grid gap-3 col-6 mx-auto">
                <a href="/settings" class="btn btn-warning btn-lg">‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ </a>
                <a href="/announcements" class="btn btn-success btn-lg">üì¢ ‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®</a>
                <a href="/help" class="btn btn-info btn-lg">‚ùì ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</a>
            </div>
            <p class="mt-3 text-danger">‚ùó‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</p>
            <p class="mt-3 text-danger">‚ùó‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡∏≠‡∏≤‡∏à‡∏∞‡∏°‡∏µ ‡∏ö‡∏±‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ</p>
            <p class="mt-3">‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÅ‡∏•‡∏∞ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢: <a href="https://myyoomi.carrd.co/" class="text-info">‚Ñ¢MYYOOMI</a></p>
        </div>
    </body>
    </html>
    ''')

@app.route('/settings')
def settings():
    return render_template_string('''
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Bot Controls - MutodGrob</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    </head>
    <body class="text-white bg-dark">
        <div class="container mt-5">
            <div class="card bg-dark text-white p-4 shadow">
                  <div class="text-center">
                    <img src="https://yourpicture.png" class="img-fluid rounded-circle mx-auto d-block" alt="logo" style="max-width: 200px; height: auto;">
                </div>
                <h1 class="text-center mb-4">‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏≠‡∏ó </h1>
                <button class="btn btn-info w-100 mb-3" onclick="updateStatus()">üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏≠‡∏ó</button>
                <button class="btn btn-info w-100 mb-3" onclick="updateWelcomeChannel()">üó®Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö</button>
                <button class="btn btn-info w-100 mb-3" onclick="updateWelcomeMessage()">üìù ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö</button>
                <a href="/" class="btn btn-secondary w-100 mt-3">‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å</a>
            </div>
            <p class="mt-3 text-danger">‚ùó‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</p>
            <p class="mt-3">‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÅ‡∏•‡∏∞ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢: <a href="https://myyoomi.carrd.co/" class="text-info">‚Ñ¢MYYOOMI</a></p>
        </div>

        <script>
            async function updateWelcomeMessage() {
                const { value: welcomeMsg } = await Swal.fire({
                    title: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö',
                    input: 'textarea',
                    inputLabel: '‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ {mention} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡∏∞ {guild} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
                    inputPlaceholder: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {mention} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà {guild}!',
                    showCancelButton: true,
                    inputValidator: (value) => {
                        if (!value) return '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö';
                    }
                });

                if (welcomeMsg) {
                    await fetch('/set_welcome_message', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message: welcomeMsg })
                    });
                    Swal.fire('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß', 'success');
                }
            }

            async function updateStatus() {
                const { value: newStatus } = await Swal.fire({
                    title: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞',
                    input: 'text',
                    inputLabel: '‡πÉ‡∏™‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÅ‡∏™‡∏î‡∏á:',
                    showCancelButton: true,
                    inputValidator: (value) => {
                        if (!value) {
                            return '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏ã‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á!'
                        }
                    }
                });

                if (newStatus) {
                    await fetch('/set_status', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({status: newStatus})
                    });
                    Swal.fire('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', '‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß', 'success');
                }
            }

            async function updateWelcomeChannel() {
                const { value: channelId } = await Swal.fire({
                    title: 'Set Welcome Channel',
                    input: 'text',
                    inputLabel: '‡πÉ‡∏™‡πà ID ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤:',
                    showCancelButton: true,
                    inputValidator: (value) => {
                        if (!value) {
                            return '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏ã‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á!'
                        }
                    }
                });

                if (channelId) {
                    await fetch('/set_welcome_channel', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/json'},
                        body: JSON.stringify({channel_id: channelId})
                    });
                    Swal.fire('‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', '‡∏´‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß', 'success');
                }
            }
        </script>
    </body>
    
    </html>
    ''')
    
@app.route('/announcements')
def announcement_page():
    return render_template_string('''
    <!DOCTYPE html>
    <html lang="th">
    <head>
        <meta charset="UTF-8">
        <title>üì¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® - MutodGrob</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body class="bg-dark text-white">
        <div class="container mt-5">
            <div class="card bg-dark text-white p-4 shadow">
                <div class="text-center">
                    <img src="https://yourpicture.png" class="img-fluid rounded-circle mx-auto d-block" alt="logo" style="max-width: 200px; height: auto;">
                </div>
                <h1 class="text-center mb-4">üì¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° üì¢</h1>
                <form action="/announce" method="post" onsubmit="handleSubmit(event)">
                    <div class="mb-3">
                        <label>üåê ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå</label>
                        <p class="mt-3 text-danger">‚ùó‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏ã‡∏¥‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡πÉ‡∏´‡πâ ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏´‡∏°‡πà</p>
                        <select class="form-control" id="guildSelect" name="guild_id" onchange="fetchChannelsAndMembers()" required></select>
                    </div>
                    <div class="mb-3">
                        <label>üìÅ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á</label>
                        <div id="channelsContainer"></div>
                    </div>
                    <div class="mb-3">
                        <label>üë• ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</label>
                        <p class="mt-3 text-danger">‚ùó‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
                        <div id="membersContainer"></div>
                    </div>
                    <div class="mb-3">
                        <label>‚úèÔ∏è ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á</label>
                        <p class="mt-3 text-danger">‚ùó‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡∏™‡πà‡∏á‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥/‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏®‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÑ‡∏î‡πâ</p>
                        <input type="text" class="form-control" name="title" required>
                    </div>
                    <div class="mb-3">
                        <label>üìÑ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</label>
                        <p class="mt-3 text-danger">‚ùó‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ô‡∏ó‡∏±‡∏î‡πÑ‡∏î‡πâ ‡∏™‡πà‡∏á‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥/‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏®‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÑ‡∏î‡πâ</p>
                        <textarea class="form-control" name="message" rows="4" required></textarea>
                    </div>
                    <div class="mb-3">
                        <label>üñºÔ∏è URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
                        <input type="text" class="form-control" name="image_url">
                    </div>
                    <div class="form-check mb-2">
                        <input class="form-check-input" type="checkbox" name="tag_everyone" value="yes">
                        <label class="form-check-label">‡πÅ‡∏ó‡πá‡∏Å @everyone</label>
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" name="send_as_embed" id="embedCheck" value="yes" onchange="toggleColorPicker()">
                        <label class="form-check-label">‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Embed</label>
                    </div>
                    <div class="mb-3" id="colorPicker" style="display: none;">
                        <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ Embed</label>
                        <input type="color" class="form-control" name="color" value="#00ff00">
                    </div>
                    <button type="submit" class="btn btn-success w-100">üöÄ ‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®</button>
                </form>
                <a href="/" class="btn btn-secondary w-100 mt-3">‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a>
            </div>
            <p class="mt-3 text-danger">‚ùó‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</p>
            <p class="mt-3">‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÅ‡∏•‡∏∞ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢: <a href="https://myyoomi.carrd.co/" class="text-info">‚Ñ¢MYYOOMI</a></p>
        </div>

        <script>
        async function fetchGuilds() {
            let response = await fetch('/guilds');
            let guilds = await response.json();
            let select = document.getElementById('guildSelect');
            select.innerHTML = '<option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå</option>';
            guilds.forEach(guild => {
                let option = document.createElement('option');
                option.value = guild.id;
                option.textContent = guild.name;
                select.appendChild(option);
            });
        }
        async function fetchChannelsAndMembers() {
            let guildId = document.getElementById('guildSelect').value;
            if (!guildId) return;

            let channels = await (await fetch(`/channels?guild_id=${guildId}`)).json();
            let members = await (await fetch(`/members?guild_id=${guildId}`)).json();

            let channelContainer = document.getElementById('channelsContainer');
            let memberContainer = document.getElementById('membersContainer');

            channelContainer.innerHTML = '';
            channels.forEach(c => {
                channelContainer.innerHTML += `<div class="form-check"><input class="form-check-input" type="checkbox" name="channels" value="${c.id}"> ${c.name}</div>`;
            });

            memberContainer.innerHTML = '';
            members.forEach(m => {
                memberContainer.innerHTML += `<div class="form-check"><input class="form-check-input" type="checkbox" name="members" value="${m.id}"> ${m.name}</div>`;
            });
        }
        function toggleColorPicker() {
            const embedCheck = document.getElementById('embedCheck');
            const colorPicker = document.getElementById('colorPicker');
            colorPicker.style.display = embedCheck.checked ? 'block' : 'none';
        }
        async function handleSubmit(event) {
            event.preventDefault();
            let form = event.target;
            let formData = new FormData(form);
            let response = await fetch(form.action, {
                method: 'POST',
                body: formData
            });
            if (response.ok) {
                Swal.fire('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß', 'success');
            } else {
                Swal.fire('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ', 'error');
            }
        }
        window.onload = function() {
            fetchGuilds();
            toggleColorPicker();
        }
        </script>
    </body>
    </html>
    ''')

@app.route('/help')
def help_page():
    return render_template_string('''
    <!DOCTYPE html>
    <html lang="th">
    <head>
        <meta charset="UTF-8">
        <title>üìò ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - MutodGrob</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body class="bg-dark text-white">
        <div class="container mt-5">
            <div class="text-center mb-4">
                <img src="https://yourpicture.png" class="img-fluid rounded-circle" style="max-width: 150px;" alt="logo">
                <h1 class="mt-3">‚ùì ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö MutodGrob</h1>
            </div>
            <div class="card bg-secondary p-4 text-start">
                <h4>‚öôÔ∏è ‡∏´‡∏ô‡πâ‡∏≤ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h4>
                <ul>
                    <li><strong>üìù ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö:</strong> ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô <code>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {mention} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà {guild}</code></li>
                    <li><strong>üó®Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö:</strong> ‡∏Å‡∏£‡∏≠‡∏Å ID ‡∏´‡πâ‡∏≠‡∏á Discord ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö</li>
                    <li><strong>üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó</li>
                </ul>

                <h4 class="mt-4">üì¢ ‡∏´‡∏ô‡πâ‡∏≤ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®</h4>
                <ul>
                    <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á</li>
                    <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡πá‡∏Å (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡πÑ‡∏î‡πâ)</li>
                    <li>‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®</li>
                    <li>‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ (‡πÉ‡∏™‡πà URL ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)</li>
                    <li>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö Embed ‡πÑ‡∏î‡πâ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ</li>
                    <li>‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ó‡πá‡∏Å @everyone ‡πÑ‡∏î‡πâ</li>
                </ul>

                <h4 class="mt-4">üõ†Ô∏è ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</h4>
                <ul>
                    <li>‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•</li>
                    <li>‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ö‡∏±‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏±‡∏ç‡∏´‡∏≤</li>
                </ul>
            </div>
            <div class="text-center mt-4">
                <a href="/" class="btn btn-light">‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å</a>
                <p class="mt-3">‡∏™‡∏£‡πâ‡∏≤‡∏á ‡πÅ‡∏•‡∏∞ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏î‡∏¢: <a href="https://myyoomi.carrd.co/" class="text-info">‚Ñ¢MYYOOMI</a></p>
            </div>
        </div>
    </body>
    </html>
    ''')



@app.route('/guilds')
def get_guilds():
    guilds = [{'id': str(g.id), 'name': g.name} for g in bot.guilds]
    return jsonify(guilds)

@app.route('/channels')
def get_channels():
    guild_id = request.args.get('guild_id', type=int)
    guild = bot.get_guild(guild_id)
    if not guild:
        return jsonify([])
    channels = [{'id': str(c.id), 'name': c.name} for c in guild.text_channels]
    return jsonify(channels)

@app.route('/members')
def get_members():
    guild_id = request.args.get('guild_id', type=int)
    guild = bot.get_guild(guild_id)
    if not guild:
        return jsonify([])
    members = [{'id': str(m.id), 'name': m.display_name} for m in guild.members if not m.bot]
    return jsonify(members)

@app.route('/announce', methods=['POST'])
def announce_web():
    guild_id = int(request.form.get('guild_id'))
    channel_ids = request.form.getlist('channels')
    member_ids = request.form.getlist('members')
    title = request.form.get('title')
    message = request.form.get('message').replace("\r\n", "\n")
    image_url = request.form.get('image_url', '').strip()
    tag_everyone = request.form.get('tag_everyone') == "yes"
    send_as_embed = request.form.get('send_as_embed') == "yes"
    color = request.form.get('color', '#00ff00').lstrip('#')
    color = int(color, 16)

    member_mentions = ' '.join([f'<@{mid}>' for mid in member_ids])
    everyone_mention = "@everyone" if tag_everyone else ""

    async def send_message():
        guild = bot.get_guild(guild_id)
        if guild:
            for channel_id in channel_ids:
                channel = bot.get_channel(int(channel_id))
                if channel:
                    if send_as_embed:
                        embed = discord.Embed(title=title, description=message, color=color)
                        if image_url:
                            embed.set_image(url=image_url)
                        if tag_everyone or member_mentions:
                            embed.add_field(name="Mentions", value=f'{everyone_mention} {member_mentions}', inline=False)
                        await channel.send(embed=embed)
                    else:
                        content = f'**{title}**\n{message}\n{everyone_mention} {member_mentions}'.strip()
                        await channel.send(content)
                        if image_url:
                            await channel.send(image_url)

    asyncio.run_coroutine_threadsafe(send_message(), bot.loop)
    return redirect(url_for('home'))

if __name__ == "__main__":
    threading.Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': 5709, 'debug': False}, daemon=True).start()
    time.sleep(5)
    asyncio.run(bot.start(os.getenv("DISCORD_BOT_TOKEN")))